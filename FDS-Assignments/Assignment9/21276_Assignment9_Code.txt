#include <iostream>
#include <bits/stdc++.h>
#define endl "\n"
using namespace std;

const int Max=1000;
class Stack{
    char exp[Max];
    int top;
    public:
        Stack(){
            top=-1;
        }
        void push(char ch);
        char pop();
        bool is_empty();
        bool is_full();
        void check_parenthesis();
};

bool Stack::is_empty(){
    if(top==-1){
        return 1;
    }
    else
    {
        return 0;
    }
}

bool Stack::is_full(){
    if(top==Max-1){
        return 1;
    }
    else
    {
        return 0;
    }
}

void Stack::push(char ch){
    if(!is_full()){
        top++;
        exp[top]=ch;
    }
}

char Stack::pop()
{
    if (!is_empty()) {
        char ch=exp[top];
        top--;
        return ch;
    }
    else {
        return '\0';
    }
}

void Stack::check_parenthesis(){
    cout << "\nEnter Expression: ";
    cin >> exp;
    char ch;
    bool flag=0;
    for(int i=0;exp[i]!='\0';++i){
        if(exp[i]=='(' || exp[i]=='[' || exp[i]=='{'){
            push(exp[i]);
        }
        if(exp[i]==')' || exp[i]==']' || exp[i]=='}'){
            ch=pop();
            if((exp[i]==')' && ch!='(') || (exp[i]==']' && ch!='[') || (exp[i]=='}' && ch!='{')){
                cout << "\nExpression is not well parentheisized at: " << i <<
                " = " << exp[i] << endl;
                flag=1;
                break;
            }
        }
    }
    if(is_empty()==1 && flag==0){
        cout << "\nGiven expression is well parenthesized!" << endl;
    }
    else
    {
        cout << "Given expression is not well parenthesized!" << endl;
    }
    
}

int main(){
    char ans;
    do
    {
        Stack s;
        s.check_parenthesis();
        cout << "Do you want to continue?(y/n): ";
        cin >> ans;
    } while (ans=='y');
    return 0;
}


Sample Output:

Enter Expression: (a+b)

Given expression is well parenthesized!
Do you want to continue?(y/n): y

Enter Expression: (a+b+c)-d)

Expression is not well parentheisized at: 9 = )
Given expression is not well parenthesized!
Do you want to continue?(y/n): n